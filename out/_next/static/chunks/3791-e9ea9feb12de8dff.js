"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3791],{46520:(e,t,a)=>{a.d(t,{p:()=>o});let o="https://payzoll-server-pharos.onrender.com"},53791:(e,t,a)=>{a.d(t,{L:()=>l});var o=a(23464),r=a(74228);let d="https://aggregator.walrus-testnet.walrus.space",n="https://publisher.walrus-testnet.walrus.space";function c(e,t){let a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];console.log("%c WALRUS ".concat(a?"ERROR":"LOG"," "),a?"background: #f44336; color: white; padding: 2px 5px; border-radius: 2px;":"background: #4CAF50; color: white; padding: 2px 5px; border-radius: 2px;",e),t&&console.log(t)}let i={records:[],lastUpdated:Date.now()},l={storeAuditRecord:async e=>{var t,a,r,d,l;c("Storing audit record of type: ".concat(e.recordType),{recordId:e.recordId,walletAddresses:e.walletAddresses,totalAmount:e.totalAmount});try{let d=JSON.stringify(e);c("Request payload prepared: ".concat(d.substring(0,100),"...")),c("Sending request to ".concat(n,"/v1/blobs?epochs=10"));let l=performance.now(),s=await (0,o.A)({method:"PUT",url:"".concat(n,"/v1/blobs?epochs=10"),data:d,headers:{"Content-Type":"application/json"}}),b=Math.round(performance.now()-l);c("Response received in ".concat(b,"ms"),{status:s.status,statusText:s.statusText});let p=(null==(a=s.data.newlyCreated)||null==(t=a.blobObject)?void 0:t.blobId)||(null==(r=s.data.alreadyCertified)?void 0:r.blobId);if(p)c("Successfully stored on Walrus with blob ID: ".concat(p),{rawResponse:s.data});else throw c("Failed to extract blob ID from response",s.data,!0),Error("Failed to get blob ID from Walrus response");return i.records.push({blobId:p,recordType:e.recordType,recordId:e.recordId,timestamp:e.timestamp}),i.lastUpdated=Date.now(),c("Updating audit index with new record. Total records: ".concat(i.records.length)),await u(),p}catch(e){throw c("Error storing audit data on Walrus: ".concat(e.message),{error:e,errorResponse:null==(d=e.response)?void 0:d.data,statusCode:null==(l=e.response)?void 0:l.status},!0),e}},getAuditRecord:async e=>{var t,a,r,n;c("Retrieving audit record with blob ID: ".concat(e));try{let r=performance.now(),n=await o.A.get("".concat(d,"/v1/blobs/").concat(e)),i=Math.round(performance.now()-r);return c("Retrieved audit record in ".concat(i,"ms"),{recordType:null==(t=n.data)?void 0:t.recordType,timestamp:(null==(a=n.data)?void 0:a.timestamp)?new Date(n.data.timestamp).toISOString():"unknown"}),n.data}catch(t){throw c("Error retrieving audit data from Walrus: ".concat(t.message),{blobId:e,errorResponse:null==(r=t.response)?void 0:r.data,statusCode:null==(n=t.response)?void 0:n.status},!0),t}},getAllAuditRecords:async()=>{c("Fetching all audit records");try{let e=await s();if(!e)return c("No audit index found in storage",null,!0),[];c("Found audit index blob ID: ".concat(e));let t=performance.now(),a=await o.A.get("".concat(d,"/v1/blobs/").concat(e)),r=Math.round(performance.now()-t),n=a.data;if(c("Retrieved audit index in ".concat(r,"ms with ").concat(n.records.length," records"),{lastUpdated:new Date(n.lastUpdated).toISOString()}),0===n.records.length)return c("Audit index is empty, no records to fetch"),[];c("Fetching ".concat(n.records.length," individual audit records..."));let i=await Promise.all(n.records.map(e=>l.getAuditRecord(e.blobId)));return c("Successfully retrieved ".concat(i.length," audit records"),{recordTypes:i.map(e=>e.recordType),totalRecords:i.length}),i}catch(a){var e,t;return c("Error retrieving all audit records: ".concat(a.message),{errorDetails:a,errorResponse:null==(e=a.response)?void 0:e.data,statusCode:null==(t=a.response)?void 0:t.status},!0),[]}},storePaymentRecord:async(e,t,a,o,r,d,n)=>{c("Storing ".concat(e," payment record"),{paymentId:t,paymentObjectId:a,fromAddress:o,toAddress:r,amount:d});let i={recordType:"payment",recordId:"payment-".concat(t,"-").concat(e,"-").concat(Date.now()),timestamp:Date.now(),walletAddresses:[o,r],totalAmount:d,chain:"SUI",status:"send"===e?"sent":"claim"===e?"claimed":"reimbursed",transactionHash:n,paymentId:t,paymentObjectId:a,paymentAction:e};return l.storeAuditRecord(i)},getPaymentRecords:async()=>(await l.getAllAuditRecords()).filter(e=>"payment"===e.recordType),recoverAuditIndex:async()=>{c("Attempting to recover audit index...");try{var e,t,a;let d={records:[],lastUpdated:Date.now()},l=await (0,o.A)({method:"PUT",url:"".concat(n,"/v1/blobs?epochs=20"),data:JSON.stringify(d),headers:{"Content-Type":"application/json"}}),s=(null==(t=l.data.newlyCreated)||null==(e=t.blobObject)?void 0:e.blobId)||(null==(a=l.data.alreadyCertified)?void 0:a.blobId);if(!s)throw Error("Failed to create new audit index");try{await r.A.post("/blobs/audit-index",{blobId:s}),c("Created and saved new empty audit index with ID: ".concat(s," to database"))}catch(e){c("Failed to save new audit index to database, falling back to localStorage",e,!0),localStorage.setItem("auditIndexBlobId",s),c("Created and saved new empty audit index with ID: ".concat(s," to localStorage as fallback"))}return i=d,s}catch(e){return c("Failed to recover audit index",e,!0),null}},initializeNewAuditIndex:async()=>{c("Initializing new audit index");try{i={records:[],lastUpdated:Date.now()};let e=await u();return c("Created new audit index with ID: ".concat(e)),e}catch(e){return c("Failed to initialize new audit index",e,!0),null}},updatePaymentObjectId:async(e,t)=>{c("Updating payment object ID for payment ".concat(e),{paymentObjectId:t});try{let a=(await l.getAllAuditRecords()).filter(t=>"payment"===t.recordType&&t.paymentId===e&&"send"===t.paymentAction);if(0===a.length)return c("No existing payment record found for payment ID: ".concat(e),null,!0),!1;let o=a[0];if(o.paymentObjectId===t)return c("Payment object ID already set for payment ".concat(e),{paymentObjectId:t}),!0;let r={...o,paymentObjectId:t,recordId:"".concat(o.recordId,"_updated")};return await l.storeAuditRecord(r),c("Successfully updated payment object ID for payment ".concat(e)),!0}catch(e){return c("Error updating payment object ID: ".concat(e.message),e,!0),!1}}};async function s(){try{c("Fetching audit index blob ID from backend database...");let e=await r.A.get("/blobs/audit-index");if(e.data&&e.data.blobId)return c("Retrieved audit index blob ID from database: ".concat(e.data.blobId)),e.data.blobId}catch(e){c("Failed to retrieve blob ID from database, falling back to localStorage",e,!0)}{let e=localStorage.getItem("auditIndexBlobId");if(e){c("Retrieved audit index blob ID from localStorage fallback: ".concat(e));try{await r.A.post("/blobs/audit-index",{blobId:e}),c("Successfully synced localStorage blob ID to database")}catch(e){c("Failed to sync localStorage blob ID to database",e,!0)}return e}}return c("No audit index blob ID found in database or localStorage"),null}async function u(){var e,t,a,l,u;c("Storing updated audit index with ".concat(i.records.length," records"));try{let l=await s();if(l)try{c("Found existing index, loading records from it");let e=(await o.A.get("".concat(d,"/v1/blobs/").concat(l))).data;if(e&&e.records){c("Found ".concat(e.records.length," records in existing index"));let t=new Set(i.records.map(e=>e.blobId));for(let a of e.records)t.has(a.blobId)||(c("Adding existing record to in-memory index: ".concat(a.blobId)),i.records.push(a));c("Combined index now has ".concat(i.records.length," records"))}}catch(e){c("Error loading existing index, continuing with current records only",e,!0)}let u=performance.now(),b=await (0,o.A)({method:"PUT",url:"".concat(n,"/v1/blobs?epochs=20"),data:JSON.stringify(i),headers:{"Content-Type":"application/json"}}),p=Math.round(performance.now()-u),m=(null==(t=b.data.newlyCreated)||null==(e=t.blobObject)?void 0:e.blobId)||(null==(a=b.data.alreadyCertified)?void 0:a.blobId);if(!m)throw c("Failed to extract blob ID for audit index",b.data,!0),Error("Failed to get blob ID from Walrus response for audit index");c("Audit index stored successfully in ".concat(p,"ms with ID: ").concat(m));try{await r.A.post("/blobs/audit-index",{blobId:m}),c("Saved audit index blob ID to database: ".concat(m))}catch(e){c("Failed to save audit index blob ID to database, falling back to localStorage",e,!0),localStorage.setItem("auditIndexBlobId",m),c("Saved audit index blob ID to localStorage as fallback: ".concat(m))}return m}catch(e){throw c("Error storing audit index: ".concat(e.message),{error:e,errorResponse:null==(l=e.response)?void 0:l.data,statusCode:null==(u=e.response)?void 0:u.status},!0),e}}},74228:(e,t,a)=>{a.d(t,{A:()=>n});var o=a(23464);let r=a(46520).p,d=o.A.create({baseURL:r,headers:{"Content-Type":"application/json"}});d.interceptors.request.use(e=>{let t=localStorage.getItem("authToken");return t&&e.headers&&(e.headers.Authorization="Bearer ".concat(t)),e},e=>Promise.reject(e)),d.interceptors.response.use(e=>e,e=>{let{response:t}=e;return(null==t?void 0:t.status)===401&&(localStorage.removeItem("authToken"),window.location.href="/"),Promise.reject({status:null==t?void 0:t.status,message:"object"==typeof(null==t?void 0:t.data)&&(null==t?void 0:t.data)&&"message"in t.data?t.data.message:"An unexpected error occurred",data:null==t?void 0:t.data,originalError:e})});let n=d}}]);